/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.traveltripper.perfMonitoringApp;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.Set;

import javax.swing.ImageIcon;

import com.traveltripper.perfMonitoringApp.JMeterFromScratch;
import com.traveltripper.perfMonitoringApp.db.DbProperty;
import com.traveltripper.perfMonitoringApp.db.GetPropertyFactory;

/**
 *
 * @author TT02
 */
public class GetActionJFrame extends javax.swing.JFrame {
	/**
	 * Creates new form NewScreen1
	 * 
	 * 
	 */

	String dir = System.getProperty("user.dir");

	Map<String, List<String>> mymap = new LinkedHashMap<String, List<String>>();
	List<Integer> limitList = new ArrayList<Integer>();
	// java.util.List<String> list = new ArrayList<String>();
	int limit = 0;

	private String environment;

	public String getEnvironment() {
		return environment;
	}

	public void setEnvironment(String environment) {
		this.environment = environment;
	}

	public GetActionJFrame() {
		initComponents();
		staticPanel.setFocusable(true);
		setIcon();
		dynamicDatePanel.setVisible(false);
	}

	public void setIcon() {
		Image image = new ImageIcon(this.getClass().getClassLoader().getResource("images/TraveltripperICon.png"))
				.getImage();

		setIconImage(image);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		try {
			io = this.getClass().getClassLoader().getResourceAsStream("Props/GetActionJFrame.properties");
			prop = new Properties();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		try {
			prop.load(io);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// Panels
		contentPanel = new javax.swing.JPanel();
		staticPanel = new javax.swing.JPanel();
		dynamicDatePanel = new javax.swing.JPanel();
		dynamicPanel = new javax.swing.JPanel();
		stringPanel = new javax.swing.JPanel();
		buttonPanel = new javax.swing.JPanel();
		stringTextAreaBeforePanel = new javax.swing.JPanel();
		stringTextAreaPanel = new javax.swing.JPanel();
		normalDataPanel = new javax.swing.JPanel();
		stringDynamicPanel = new javax.swing.JPanel();
		datePanelInStatic = new javax.swing.JPanel();
		arrDepDataPanel = new javax.swing.JPanel();
		numberPanel = new javax.swing.JPanel();
		numberDynamicPanel = new javax.swing.JPanel();
		numberTaBeforePanel = new javax.swing.JPanel();
		numberTaPanel = new javax.swing.JPanel();

		// TextFields
		limitTf = new javax.swing.JTextField();
		bindingNameTf = new javax.swing.JTextField();
		depBindingNameTf = new javax.swing.JTextField();
		fromDateTf = new javax.swing.JTextField();
		toDateTf = new javax.swing.JTextField();
		stringTf = new javax.swing.JTextField();
		fromNumberTf = new javax.swing.JTextField();
		toNumberTf = new javax.swing.JTextField();
		arrfromDateTf = new javax.swing.JTextField();

		// Labels
		bindingNameLabel = new javax.swing.JLabel();
		parameterTypeLabel = new javax.swing.JLabel();
		limitLable = new javax.swing.JLabel();
		arrAndDepLabel = new javax.swing.JLabel();
		depBindingNamLabel = new javax.swing.JLabel();
		stringSqlLabel = new javax.swing.JLabel();
		stringLabel = new javax.swing.JLabel();
		toDateLabel = new javax.swing.JLabel();
		randomDateLabel = new javax.swing.JLabel();
		dateLabel = new javax.swing.JLabel();
		arrfromDateLabel = new javax.swing.JLabel();
		numberLabel = new javax.swing.JLabel();
		toNumberLabel = new javax.swing.JLabel();
		sqlNumberLabel = new javax.swing.JLabel();
		dateRangeLabel = new javax.swing.JLabel();
		fromDateLabel = new javax.swing.JLabel();
		fromNumberLabel = new javax.swing.JLabel();

		// Buttons
		addMoreButton = new javax.swing.JButton();
		submitButton = new javax.swing.JButton();
		resetButton = new javax.swing.JButton();
		closeButton = new javax.swing.JButton();

		// Text Area
		numberSqlQueryTa = new javax.swing.JScrollPane();
		numberTa = new javax.swing.JTextArea();
		stringSqlQueryTa = new javax.swing.JScrollPane();
		stringTa = new javax.swing.JTextArea();

		// DropDown
		parameterTypeDd = new javax.swing.JComboBox<>();
		parameterTypeDd.setActionCommand(prop.getProperty("parameterTypeDd"));

		// CheckBox
		arrAndDepCb = new javax.swing.JCheckBox();
		arrAndDepCb.setActionCommand(prop.getProperty("arrAndDepCb"));

		stringSqlCb = new javax.swing.JCheckBox();
		stringSqlCb.setActionCommand(prop.getProperty("stringSqlCb"));

		randomDateCb = new javax.swing.JCheckBox();

		sqlNumberCb = new javax.swing.JCheckBox();
		sqlNumberCb.setActionCommand(prop.getProperty("sqlNumberCb"));

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle(prop.getProperty("title"));
		setResizable(false);

		bindingNameLabel.setText(prop.getProperty("bindingNameLabel"));

		parameterTypeLabel.setText(prop.getProperty("parameterTypeLabel"));

		bindingNameTf.setText("Enter Binding Name");
		bindingNameTf.addFocusListener(listener);

		String parameterTypeDd1 = prop.getProperty("parameterTypeDd1");
		String parameterTypeDd2 = prop.getProperty("parameterTypeDd2");
		String parameterTypeDd3 = prop.getProperty("parameterTypeDd3");
		parameterTypeDd.setModel(new javax.swing.DefaultComboBoxModel<>(
				new String[] { parameterTypeDd1, parameterTypeDd2, parameterTypeDd3 }));
		parameterTypeDd.addActionListener(listener);

		dynamicDatePanel.setLayout(new java.awt.CardLayout());

		arrAndDepLabel.setText(prop.getProperty("arrAndDepLabel"));
		arrAndDepCb.addActionListener(listener);

		depBindingNamLabel.setText(prop.getProperty("depBindingNamLabel"));

		depBindingNameTf.setText(prop.getProperty("depBindingNameTf"));
		depBindingNameTf.addFocusListener(listener);

		javax.swing.GroupLayout DatePanelInStaticLayout = new javax.swing.GroupLayout(datePanelInStatic);
		datePanelInStatic.setLayout(DatePanelInStaticLayout);
        DatePanelInStaticLayout.setHorizontalGroup(
            DatePanelInStaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DatePanelInStaticLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DatePanelInStaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DatePanelInStaticLayout.createSequentialGroup()
                        .addComponent(arrAndDepLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(arrAndDepCb, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))
                    .addGroup(DatePanelInStaticLayout.createSequentialGroup()
                        .addComponent(depBindingNamLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(depBindingNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        DatePanelInStaticLayout.setVerticalGroup(
            DatePanelInStaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DatePanelInStaticLayout.createSequentialGroup()
                .addGroup(DatePanelInStaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DatePanelInStaticLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(arrAndDepLabel))
                    .addGroup(DatePanelInStaticLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(arrAndDepCb, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DatePanelInStaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depBindingNamLabel)
                    .addComponent(depBindingNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        dynamicDatePanel.add(datePanelInStatic, "card2");

		limitLable.setText(prop.getProperty("limitLable"));

		limitTf.setText(prop.getProperty("limitTf"));

		limitTf.addFocusListener(listener);
		limitTf.addMouseListener(listener);
		/*
		 * limitTf.addMouseListener(new java.awt.event.MouseAdapter() { public void
		 * mouseExited(java.awt.event.MouseEvent evt) { limitTfMouseExited(evt); } });
		 */
		 javax.swing.GroupLayout staticPanelLayout = new javax.swing.GroupLayout(staticPanel);
	        staticPanel.setLayout(staticPanelLayout);
	        staticPanelLayout.setHorizontalGroup(
	            staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(staticPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addGroup(staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addGroup(staticPanelLayout.createSequentialGroup()
	                        .addComponent(bindingNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(18, 18, 18)
	                        .addComponent(bindingNameTf, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
	                    .addGroup(staticPanelLayout.createSequentialGroup()
	                        .addGroup(staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addComponent(parameterTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(limitLable, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addGap(18, 18, 18)
	                        .addGroup(staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                            .addComponent(parameterTypeDd, 0, 144, Short.MAX_VALUE)
	                            .addComponent(limitTf))))
	                .addGap(72, 72, 72)
	                .addComponent(dynamicDatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                .addContainerGap())
	        );
	        staticPanelLayout.setVerticalGroup(
	            staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(staticPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addGroup(staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(staticPanelLayout.createSequentialGroup()
	                        .addGroup(staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                            .addComponent(bindingNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(bindingNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addGap(18, 18, 18)
	                        .addGroup(staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                            .addComponent(parameterTypeDd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(parameterTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                        .addGap(18, 18, 18)
	                        .addGroup(staticPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
	                            .addComponent(limitLable, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(limitTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addGap(0, 0, Short.MAX_VALUE))
	                    .addComponent(dynamicDatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addContainerGap())
	        );

		addMoreButton.setText(prop.getProperty("addMoreButton"));
		addMoreButton.addActionListener(listener);

		submitButton.setText(prop.getProperty("submitButton"));
		submitButton.addActionListener(listener);

		resetButton.setText(prop.getProperty("resetButton"));
		resetButton.addActionListener(listener);

		closeButton.setText(prop.getProperty("closeButton"));
		closeButton.addActionListener(listener);

		 javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
	        buttonPanel.setLayout(buttonPanelLayout);
	        buttonPanelLayout.setHorizontalGroup(
	            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(buttonPanelLayout.createSequentialGroup()
	                .addGap(40, 40, 40)
	                .addComponent(addMoreButton)
	                .addGap(117, 117, 117)
	                .addComponent(resetButton)
	                .addGap(99, 99, 99)
	                .addComponent(submitButton)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                .addComponent(closeButton)
	                .addGap(68, 68, 68))
	        );
	        buttonPanelLayout.setVerticalGroup(
	            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(buttonPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(addMoreButton)
	                    .addComponent(closeButton)
	                    .addComponent(resetButton)
	                    .addComponent(submitButton))
	                .addGap(22, 22, 22))
	        );

		dynamicPanel.setLayout(new java.awt.CardLayout());

		stringLabel.setText(prop.getProperty("stringLabel"));

		stringTf.setText(prop.getProperty("stringTf"));
		stringTf.addFocusListener(listener);

		stringSqlLabel.setText(prop.getProperty("stringSqlLabel"));

		stringDynamicPanel.setLayout(new java.awt.CardLayout());

		 javax.swing.GroupLayout stringTextAreaBeforePanelLayout = new javax.swing.GroupLayout(stringTextAreaBeforePanel);
	        stringTextAreaBeforePanel.setLayout(stringTextAreaBeforePanelLayout);
	        stringTextAreaBeforePanelLayout.setHorizontalGroup(
	            stringTextAreaBeforePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGap(0, 679, Short.MAX_VALUE)
	        );
	        stringTextAreaBeforePanelLayout.setVerticalGroup(
	            stringTextAreaBeforePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGap(0, 118, Short.MAX_VALUE)
	        );

	        stringDynamicPanel.add(stringTextAreaBeforePanel, "card3");

		stringTa.setColumns(20);
		stringTa.setRows(5);
		stringTa.setText("Enter Sql Query...");
		stringTa.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusGained(java.awt.event.FocusEvent evt) {
				stringTaFocusGained(evt);
			}

			public void focusLost(java.awt.event.FocusEvent evt) {
				stringTaFocusLost(evt);
			}
		});
		stringSqlQueryTa.setViewportView(stringTa);

		 javax.swing.GroupLayout stringTextAreaPanelLayout = new javax.swing.GroupLayout(stringTextAreaPanel);
	        stringTextAreaPanel.setLayout(stringTextAreaPanelLayout);
	        stringTextAreaPanelLayout.setHorizontalGroup(
	            stringTextAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stringTextAreaPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addComponent(stringSqlQueryTa, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
	                .addContainerGap())
	        );
	        stringTextAreaPanelLayout.setVerticalGroup(
	            stringTextAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(stringTextAreaPanelLayout.createSequentialGroup()
	                .addComponent(stringSqlQueryTa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(0, 22, Short.MAX_VALUE))
	        );
		stringDynamicPanel.add(stringTextAreaPanel, "card2");

		stringSqlCb.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				stringSqlCbActionPerformed(evt);
			}
		});

		 javax.swing.GroupLayout stringPanelLayout = new javax.swing.GroupLayout(stringPanel);
	        stringPanel.setLayout(stringPanelLayout);
	        stringPanelLayout.setHorizontalGroup(
	            stringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(stringPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addGroup(stringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addComponent(stringDynamicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                    .addGroup(stringPanelLayout.createSequentialGroup()
	                        .addComponent(stringLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(28, 28, 28)
	                        .addComponent(stringTf, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(84, 84, 84)
	                        .addComponent(stringSqlLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(39, 39, 39)
	                        .addComponent(stringSqlCb)
	                        .addGap(0, 0, Short.MAX_VALUE)))
	                .addContainerGap())
	        );
	        stringPanelLayout.setVerticalGroup(
	            stringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(stringPanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addGroup(stringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addGroup(stringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                        .addGroup(stringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                            .addComponent(stringLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(stringTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
	                        .addComponent(stringSqlLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addComponent(stringSqlCb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                .addComponent(stringDynamicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                .addContainerGap())
	        );
	        
		dynamicPanel.add(stringPanel, "card3");

		dateRangeLabel.setText(prop.getProperty("dateRangeLabel"));

		fromDateLabel.setText(prop.getProperty("fromDateLabel"));

		fromDateTf.setText(prop.getProperty("fromDateTf"));
		fromDateTf.addFocusListener(listener);

		toDateLabel.setText(prop.getProperty("toDateLabel"));

		toDateTf.setText(prop.getProperty("toDateTf"));
		toDateTf.addFocusListener(listener);

		randomDateLabel.setText(prop.getProperty("randomDateLabel"));

		javax.swing.GroupLayout normalDataPanelLayout = new javax.swing.GroupLayout(normalDataPanel);
        normalDataPanel.setLayout(normalDataPanelLayout);
        normalDataPanelLayout.setHorizontalGroup(
            normalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(normalDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateRangeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fromDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fromDateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(toDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(toDateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(randomDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomDateCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        normalDataPanelLayout.setVerticalGroup(
            normalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(normalDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(normalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(randomDateCb, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(normalDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateRangeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fromDateLabel)
                        .addComponent(fromDateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toDateLabel)
                        .addComponent(toDateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(randomDateLabel)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        
		dynamicPanel.add(normalDataPanel, "card5");

		dateLabel.setText(prop.getProperty("dateLabel"));

		arrfromDateTf.setText(prop.getProperty("arrfromDateTf"));
		arrfromDateTf.addFocusListener(listener);

		arrfromDateLabel.setText(prop.getProperty("arrfromDateLabel"));

        javax.swing.GroupLayout arrDepDataPanelLayout = new javax.swing.GroupLayout(arrDepDataPanel);
        arrDepDataPanel.setLayout(arrDepDataPanelLayout);
        arrDepDataPanelLayout.setHorizontalGroup(
            arrDepDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arrDepDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(arrfromDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(arrfromDateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(376, Short.MAX_VALUE))
        );
        arrDepDataPanelLayout.setVerticalGroup(
            arrDepDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arrDepDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(arrDepDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arrfromDateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arrfromDateLabel))
                .addGap(140, 140, 140))
        );

		dynamicPanel.add(arrDepDataPanel, "card2");

		numberLabel.setText(prop.getProperty("numberLabel"));

		fromNumberTf.setText(prop.getProperty("fromNumberTf"));
		fromNumberTf.addFocusListener(listener);

		toNumberLabel.setText(prop.getProperty("toNumberLabel"));

		toNumberTf.setText(prop.getProperty("toNumberTf"));
		toNumberTf.addFocusListener(listener);

		sqlNumberLabel.setText(prop.getProperty("sqlNumberLabel")); // 547-524

		numberDynamicPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout numberTaBeforePanelLayout = new javax.swing.GroupLayout(numberTaBeforePanel);
        numberTaBeforePanel.setLayout(numberTaBeforePanelLayout);
        numberTaBeforePanelLayout.setHorizontalGroup(
            numberTaBeforePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 679, Short.MAX_VALUE)
        );
        numberTaBeforePanelLayout.setVerticalGroup(
            numberTaBeforePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 122, Short.MAX_VALUE)
        );

		numberDynamicPanel.add(numberTaBeforePanel, "card3");

		numberTa.setColumns(20);
		numberTa.setRows(5);
		String numberTaText = prop.getProperty("numberTaText");
		numberTa.setText(numberTaText);

		numberTa.addFocusListener(listener);

		numberSqlQueryTa.setViewportView(numberTa);

		javax.swing.GroupLayout numberTaPanelLayout = new javax.swing.GroupLayout(numberTaPanel);
        numberTaPanel.setLayout(numberTaPanelLayout);
        numberTaPanelLayout.setHorizontalGroup(
            numberTaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numberTaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numberSqlQueryTa, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                .addContainerGap())
        );
        numberTaPanelLayout.setVerticalGroup(
            numberTaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numberTaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numberSqlQueryTa, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );
        
		numberDynamicPanel.add(numberTaPanel, "card2");

		fromNumberLabel.setText("From");

		sqlNumberCb.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sqlNumberCbActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout numberPanelLayout = new javax.swing.GroupLayout(numberPanel);
        numberPanel.setLayout(numberPanelLayout);
        numberPanelLayout.setHorizontalGroup(
            numberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numberPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(numberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numberDynamicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(numberPanelLayout.createSequentialGroup()
                        .addComponent(numberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(fromNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fromNumberTf, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(toNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toNumberTf, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(sqlNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sqlNumberCb, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        numberPanelLayout.setVerticalGroup(
            numberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numberPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(numberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(numberPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(sqlNumberCb))
                    .addGroup(numberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(numberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fromNumberTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toNumberTf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sqlNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fromNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberDynamicPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

		dynamicPanel.add(numberPanel, "card4");

		javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(staticPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dynamicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(staticPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dynamicPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>

	private void bindingNameTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void parameterTypeDdActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		// jComboBox.getSelectedItem()
		// System.out.println(" parameterTypeDdActionPerformed(");
		// System.out.println(parameterTypeDd.getSelectedItem());

		if (parameterTypeDd.getSelectedItem().equals("Date")) {
			dynamicDatePanel.setVisible(true);
			dynamicPanel.removeAll();
			dynamicPanel.repaint();
			dynamicPanel.revalidate();
			dynamicPanel.add(normalDataPanel);
			dynamicPanel.repaint();
			dynamicPanel.revalidate();
			dynamicDatePanel.removeAll();
			dynamicDatePanel.repaint();
			dynamicDatePanel.revalidate();
			dynamicDatePanel.add(datePanelInStatic);
			dynamicDatePanel.repaint();
			dynamicDatePanel.revalidate();
			arrAndDepCb.setSelected(false);
			depBindingNamLabel.setVisible(false);
			depBindingNameTf.setVisible(false);
		}

		else if (parameterTypeDd.getSelectedItem().equals("String")) {
			dynamicPanel.removeAll();
			dynamicPanel.repaint();
			dynamicPanel.revalidate();

			dynamicPanel.add(stringPanel);
			dynamicPanel.repaint();
			dynamicPanel.revalidate();

			dynamicDatePanel.removeAll();
			dynamicDatePanel.repaint();
			dynamicDatePanel.revalidate();

			// dynamicDatePanel.add(planePanel);
			// dynamicDatePanel.repaint();
			// dynamicDatePanel.revalidate();

			arrAndDepCb.setSelected(false);
		} else if (parameterTypeDd.getSelectedItem().equals("Number")) {
			dynamicPanel.removeAll();
			dynamicPanel.repaint();
			dynamicPanel.revalidate();

			dynamicPanel.add(numberPanel);
			dynamicPanel.repaint();
			dynamicPanel.revalidate();

			dynamicDatePanel.removeAll();
			dynamicDatePanel.repaint();
			dynamicDatePanel.revalidate();

			// dynamicDatePanel.add(planePanel);
			// dynamicDatePanel.repaint();
			// dynamic;.DatePanel.revalidate();

			arrAndDepCb.setSelected(false);
		}
	}

	private void stringTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void fromNumberTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void toNumberTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void addMoreButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		InputStream io = this.getClass().getClassLoader().getResourceAsStream("Props/GetActionJFrame.properties");
		Properties prop1 = new Properties();
		try {
			prop1.load(io);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		String bindingName = bindingNameTf.getText();
		limit = Integer.parseInt(limitTf.getText());
		List<String> list = new ArrayList<String>();

		if (limit > 1) {
			limitList.add(limit); // adding limit values to ArrayList if limit is greater than 0.
		}

		if (limit == 0) {
			queryParamsMap.put(bindingName, "");
		} else if (limit == 1 || limit > 1) {

			if (parameterTypeDd.getSelectedItem().equals("Date")) {

				if (arrAndDepCb.isSelected()) {
					String date = arrfromDateTf.getText();
					String depBinName = depBindingNameTf.getText();
					try {
						list = getArrivalList(date, limit);
						mymap.put(bindingName, list);
						list = getDepartureList(list);
						mymap.put(depBinName, list);
						queryParamsMap.put(bindingName, "${" + bindingName + "}");
						queryParamsMap.put(depBinName, "${" + depBinName + "}");
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					queryParamsMap.put(bindingName, fromDateTf.getText());
				}
			}

			else if (parameterTypeDd.getSelectedItem().equals("Number")) {
				if (sqlNumberCb.isSelected()) {

					String sql = numberTa.getText();
					GetPropertyFactory propFactory = new GetPropertyFactory();
					DbProperty prop = propFactory.getProperty(environment);
					Connection con = prop.getConnection();
					Statement stmt;

					if (limit == 1) {

						System.out.println("limit  is 1 , implemented for sqlCb is selected");

						try {
							stmt = con.createStatement();
							ResultSet rs = stmt.executeQuery(sql);
							rs.next();
							System.out.println("in Number lmit=1 check::" + rs.getString(1));
							queryParamsMap.put(bindingName, rs.getString(1));
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} else if (limit > 1) {
						System.out.println("limit  is >1 , implemented for sqlCb is selected");
						try {
							stmt = con.createStatement();
							ResultSet rs = stmt.executeQuery(sql);
							int count = 0;
							while (rs.next()) {
								String str = rs.getString(1);
								list.add(str);
								count++;
							}
							System.out.println("in Number lmit>1 check::" + list);
							System.out.println("list size = " + list.size());
							list = generateStringsByLimit(list, limit, count);
							System.out.println("After in Number lmit>1 check::" + list);
							System.out.println("After list size = " + list.size());
							mymap.put(bindingNameTf.getText(), list);
							queryParamsMap.put(bindingName, "${" + bindingName + "}");
						} catch (SQLException e) {
							// TODO: handle exception
							e.printStackTrace();
						}
					}
				} else {
					if (limit == 1) {
						queryParamsMap.put(bindingName, fromNumberTf.getText());
					} else if (limit > 1) {
						// System.out.println("min = "+fromNumberTf.getText()+" :: max =
						// "+toNumberTf.getText()+" ::limit = "+limit);
						int min = Integer.parseInt(fromNumberTf.getText());
						int max = Integer.parseInt(toNumberTf.getText());
						list = getNumberList(min, max, limit);
						mymap.put(bindingName, list);
						queryParamsMap.put(bindingName, "${" + bindingName + "}");
					}
				}

			} else if (parameterTypeDd.getSelectedItem().equals("String")) {

				if (stringSqlCb.isSelected()) {

					String sql = stringTa.getText();
					GetPropertyFactory propFactory = new GetPropertyFactory();
					DbProperty prop = propFactory.getProperty(environment);
					Connection con = prop.getConnection();
					Statement stmt;

					if (limit == 1) {

						try {
							stmt = con.createStatement();
							ResultSet rs = stmt.executeQuery(sql);
							rs.next();
							queryParamsMap.put(bindingName, rs.getString(1));
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					} else if (limit > 1) {

						try {
							stmt = con.createStatement();
							ResultSet rs = stmt.executeQuery(sql);
							int count = 0;
							while (rs.next()) {
								String str = URLEncoder.encode(rs.getString(1), "UTF-8");
								list.add(str);
								count++;
							}

							if (bindingNameTf.getText().equalsIgnoreCase("accessCodes")) {
								list.add("");
								list.add("");
								list.add("");
								list.add("");
								list.add("");
								list.add("");
								list.add("");
								list.add("");
								count = count + 8;
							}

							list = generateStringsByLimit(list, limit, count);

							System.out.println("list size = " + list.size());

							mymap.put(bindingNameTf.getText(), list);
							queryParamsMap.put(bindingName, "${" + bindingName + "}");

						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (UnsupportedEncodingException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}

				} else {
					if (limit == 1) {
						queryParamsMap.put(bindingName, stringTf.getText());
					} else if (limit > 1) {
						String str = stringTf.getText();
						System.out.println("text area = " + str);
						String[] groupCodes = str.split(",");
						System.out.println("groupcodes = " + groupCodes.toString());
						int i = 0;
						while (i < groupCodes.length) {
							System.out.println("groupcode = " + groupCodes[i]);
							list.add(groupCodes[i]);
							i++;
						}
						list = generateStringsByLimit(list, limit, list.size());
						mymap.put(bindingName, list);
						queryParamsMap.put(bindingName, "${" + bindingName + "}");
					}

				}

			}

		}

		bindingNameTf.setText(prop1.getProperty("bindingNameTf"));
		parameterTypeDd.setSelectedItem("String");

		arrfromDateTf.setText(prop1.getProperty("arrfromDateTf"));
		limitTf.setText(prop1.getProperty("limitTf"));

		stringTf.setText(prop1.getProperty("stringTf"));
		String stringTatext = prop1.getProperty("stringTa");
		stringTa.setText(stringTatext);

		fromNumberTf.setText(prop1.getProperty("fromNumberTf"));
		toNumberTf.setText(prop1.getProperty("toNumberTf"));
		String numberTaText = prop1.getProperty("numberTa");
		numberTa.setText(numberTaText);

		sqlNumberCb.setSelected(false);
		stringSqlCb.setSelected(false);
	}

	private List<String> generateStringsByLimit(List<String> list, int limit2, int count) {
		// TODO Auto-generated method stub

		for (int i = 0; i < limit - count; i++) {
			list.add(list.get((int) (Math.random() * count)));
		}

		return list;
	}

	private void arrfromDateTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		try {
			int i = 0;

			InputStream inputStream = this.getClass().getClassLoader()
					.getResourceAsStream("Props/filePaths.properties");
			Properties property = new Properties();
			property.load(inputStream);
			String resultsDir = property.getProperty("resultsDir");

			File dir = new File(resultsDir);

			dir.mkdir();

			if (dir.exists()) {
				System.out.println("dir exists");
			} else {
				System.out.println("dir not exists");
			}

			int size = 0;
			if (limitList.size() > 0) {
				Collections.sort(limitList);
				size = limitList.get(i);
				String fileName = apiName + ".csv";
				String worDir = System.getProperty("user.dir");
				String abPath = worDir + File.separator + resultsDir + File.separator + fileName;
				System.out.println("abPath = " + abPath);
				File file = new File(abPath);
				file.setWritable(true);
				file.setReadable(true);
				file.setExecutable(true);
				System.out.println("file = " + file);
				if (file.createNewFile()) {
					System.out.println(fileName + "is created. ");
				} else {
					System.out.println(fileName + "is Not created. ");
				}
				FileWriter fileWritter = new FileWriter(file);
				System.out.println("maximum no of values generated for queryParam = " + size);
				for (i = 0; i < size; i++) {
					for (java.util.List<String> value : mymap.values()) { // System.out.println("Hai ::" + i);
						fileWritter.write(value.get(i));
						fileWritter.write(",");
					}
					fileWritter.write("\n");
				}
				fileWritter.close();
				System.out.println(fileName + "is saved");
			} else {
				System.out.println("there are no Dynamic query Params");
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		/*
		 * List<String> keys; for(int i=0;i<mymap.size();i++) { keys=mymap.get(i); }
		 */

		JMeterFromScratch jm = new JMeterFromScratch();

		jm.setApiName(apiName);
		jm.setDelayTime(delayTime);
		jm.setDomain(domain);
		jm.setPath(path);
		jm.setDurationTime(durationTime);
		jm.setEnvironment(environment);
		jm.setMethod(method);
		jm.setProtocol(protocol);
		jm.setRampUpTime(rampUpTime);
		jm.setThreadGroupVal(threadGroupVal);
		jm.setQueryParamsMap(queryParamsMap);

		// jm.setCsvVariableNames(dynamicVarNames);
		jm.setCsvVariableNames(mymap.keySet());
		jm.setReqHeadMap(reqHeadMap);

		try {
			jm.run();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here
		// parameterNameTf.setText("Enter Parameter Name");
		InputStream io = this.getClass().getClassLoader().getResourceAsStream("Props/GetActionJFrame.properties");
		Properties prop = new Properties();
		try {
			prop.load(io);
		} catch (IOException e) {
			// TODO Auto-generated catch block

			e.printStackTrace();
		}

		System.out.println("prop.getProperty(bindingNameTf)::" + prop.getProperty("bindingNameTf"));
		bindingNameTf.setText(prop.getProperty("bindingNameTf"));
		parameterTypeDd.setSelectedItem("String");

		arrfromDateTf.setText(prop.getProperty("arrfromDateTf"));
		limitTf.setText(prop.getProperty("limitTf"));

		fromDateTf.setText(prop.getProperty("fromDateTf"));
		toDateTf.setText(prop.getProperty("toDateTf"));

		stringTf.setText(prop.getProperty("stringTf"));

		String stringTaText = prop.getProperty("stringTa");
		stringTa.setText(stringTaText);
		stringSqlCb.setSelected(false);
		stringDynamicPanel.removeAll();
		stringDynamicPanel.repaint();
		stringDynamicPanel.revalidate();
		stringDynamicPanel.add(stringTextAreaBeforePanel);
		stringDynamicPanel.repaint();
		stringDynamicPanel.revalidate();

		fromNumberTf.setText(prop.getProperty("fromNumberTf"));
		toNumberTf.setText(prop.getProperty("toNumberTf"));
		String numberTatext = prop.getProperty("numberTa");
		numberTa.setText(numberTatext);
		sqlNumberCb.setSelected(false);
		numberDynamicPanel.removeAll();
		numberDynamicPanel.repaint();
		numberDynamicPanel.revalidate();
		numberDynamicPanel.add(stringTextAreaBeforePanel);
		numberDynamicPanel.repaint();
		numberDynamicPanel.revalidate();

	}

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		System.exit(0);
	}

	private void bindingNameTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (bindingNameTf.getText().trim().equals(prop.getProperty("bindingNameTf"))) {
			bindingNameTf.setText("");
		}
	}

	private void bindingNameTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (bindingNameTf.getText().trim().equals("")) {
			bindingNameTf.setText(prop.getProperty("bindingNameTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void fromNumberTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (fromNumberTf.getText().trim().equals(prop.getProperty("fromNumberTf"))) {
			fromNumberTf.setText("");

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void fromNumberTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (fromNumberTf.getText().trim().equals("")) {
			fromNumberTf.setText(prop.getProperty("fromNumberTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void toNumberTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (toNumberTf.getText().trim().equals(prop.getProperty("toNumberTf"))) {
			toNumberTf.setText("");

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void toNumberTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (toNumberTf.getText().trim().equals("")) {
			toNumberTf.setText(prop.getProperty("toNumberTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void arrfromDateTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:

		if (arrfromDateTf.getText().trim().equals(prop.getProperty("arrfromDateTf"))) {
			arrfromDateTf.setText("");

		}
	}

	private void arrfromDateTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (arrfromDateTf.getText().trim().equals("")) {
			arrfromDateTf.setText(prop.getProperty("arrfromDateTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void stringTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (stringTf.getText().trim().equals(prop.getProperty("stringTf"))) {
			stringTf.setText("");

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void stringTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:

		if (stringTf.getText().trim().equals("")) {
			stringTf.setText(prop.getProperty("stringTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void stringSqlCbActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		if (stringSqlCb.isSelected()) {
			stringDynamicPanel.removeAll();
			stringDynamicPanel.repaint();
			stringDynamicPanel.revalidate();

			stringDynamicPanel.add(stringTextAreaPanel);
			stringDynamicPanel.repaint();
			stringDynamicPanel.revalidate();

			stringTf.setEnabled(false);

		} else {
			stringDynamicPanel.removeAll();
			stringDynamicPanel.repaint();
			stringDynamicPanel.revalidate();

			stringDynamicPanel.add(stringTextAreaBeforePanel);
			stringDynamicPanel.repaint();
			stringDynamicPanel.revalidate();

			stringTf.setEnabled(true);
		}

	}

	private void stringTaFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:

		if (stringTa.getText().trim().equals(prop.getProperty("stringTa"))) {
			stringTa.setText("");

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void stringTaFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:

		if (stringTa.getText().trim().equals("")) {
			stringTa.setText(prop.getProperty("stringTa"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void sqlNumberCbActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		if (sqlNumberCb.isSelected()) {
			numberDynamicPanel.removeAll();
			numberDynamicPanel.repaint();
			numberDynamicPanel.revalidate();

			numberDynamicPanel.add(numberTaPanel);
			numberDynamicPanel.repaint();
			numberDynamicPanel.revalidate();

			fromNumberLabel.setEnabled(false);
			toNumberLabel.setEnabled(false);
			fromNumberTf.setEnabled(false);
			toNumberTf.setEnabled(false);

		} else {
			numberDynamicPanel.removeAll();
			numberDynamicPanel.repaint();
			numberDynamicPanel.revalidate();

			numberDynamicPanel.add(stringTextAreaBeforePanel);
			numberDynamicPanel.repaint();
			numberDynamicPanel.revalidate();

			fromNumberLabel.setEnabled(true);
			toNumberLabel.setEnabled(true);
			fromNumberTf.setEnabled(true);
			toNumberTf.setEnabled(true);
		}
	}

	private void numberTaFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:

		if (numberTa.getText().trim().equals(prop.getProperty("numberTa"))) {
			numberTa.setText("");

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void numberTaFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		// Enter Sql Query...
		if (numberTa.getText().trim().equals("")) {
			numberTa.setText(prop.getProperty("numberTa"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void limitTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (limitTf.getText().trim().equals(prop.getProperty("limitTf"))) {
			limitTf.setText("");

		}
	}

	private void limitTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (limitTf.getText().trim().equals("")) {
			limitTf.setText(prop.getProperty("limitTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}

		if (limitTf.getText().trim().equals("1")) {
			fromDateLabel.setVisible(true);
			fromDateLabel.setText("   ");
			toDateLabel.setVisible(false);
			randomDateLabel.setVisible(false);
			toDateTf.setVisible(false);
			randomDateCb.setVisible(false);
			fromDateTf.setEnabled(true);

			fromNumberLabel.setVisible(true);
			fromNumberLabel.setText("   ");
			toNumberLabel.setVisible(false);
			toNumberTf.setVisible(false);
			fromNumberTf.setEnabled(true);
			fromNumberTf.setSize(limitTf.getSize());
			sqlNumberCb.setEnabled(true);
			sqlNumberLabel.setVisible(true);
			sqlNumberLabel.setEnabled(true);
			// sqlNumberCb.setSelected(false);
			numberTa.setEnabled(true);
			if (sqlNumberCb.isSelected()) {
				fromNumberLabel.setEnabled(false);
				toNumberLabel.setEnabled(false);
				fromNumberTf.setEnabled(false);
				toNumberTf.setEnabled(false);
			}

			stringLabel.setEnabled(true);
			stringTf.setEnabled(true);
			stringSqlLabel.setEnabled(true);
			stringSqlCb.setEnabled(true);
			stringTa.setEnabled(true);
			if (stringSqlCb.isSelected()) {
				stringTf.setEnabled(false);
			}
		} else if (limitTf.getText().trim().equals("0")) {

			fromDateLabel.setVisible(true);
			fromDateLabel.setText("   ");
			toDateLabel.setVisible(false);
			randomDateLabel.setVisible(false);
			toDateTf.setVisible(false);
			fromDateTf.setEnabled(false);
			randomDateCb.setVisible(false);

			fromNumberLabel.setVisible(true);
			fromNumberLabel.setText("   ");
			toNumberLabel.setVisible(false);
			toNumberTf.setVisible(false);
			fromNumberTf.setEnabled(false);
			sqlNumberCb.setEnabled(false);
			sqlNumberLabel.setEnabled(false);
			numberTa.setEnabled(false);

			stringLabel.setEnabled(false);
			stringTf.setEnabled(false);
			stringSqlLabel.setEnabled(false);
			stringSqlCb.setEnabled(false);
			stringTa.setEnabled(false);

		} else {
			fromDateLabel.setVisible(true);
			fromDateLabel.setText("From");
			toDateLabel.setVisible(true);
			randomDateLabel.setVisible(true);
			toDateTf.setVisible(true);
			fromDateTf.setEnabled(true);
			randomDateCb.setVisible(true);

			fromNumberTf.setEnabled(true);
			fromNumberLabel.setText("From");
			sqlNumberLabel.setEnabled(true);
			sqlNumberLabel.setVisible(true);
			sqlNumberCb.setEnabled(true);
			toNumberLabel.setVisible(true);
			toNumberTf.setVisible(true);
			fromNumberLabel.setVisible(true);
			numberTa.setEnabled(true);
			if (sqlNumberCb.isSelected()) {
				fromNumberLabel.setEnabled(false);
				toNumberLabel.setEnabled(false);
				fromNumberTf.setEnabled(false);
				toNumberTf.setEnabled(false);
			}

			stringLabel.setEnabled(true);
			stringTf.setEnabled(true);
			stringSqlLabel.setEnabled(true);
			stringSqlCb.setEnabled(true);
			stringTa.setEnabled(true);
			if (stringSqlCb.isSelected()) {
				stringTf.setEnabled(false);
			}
		}
	}

	private void limitTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

	}

	private void fromDateTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:

		if (fromDateTf.getText().trim().equals(prop.getProperty("fromDateTf"))) {
			fromDateTf.setText("");

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void fromDateTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (fromDateTf.getText().trim().equals("")) {
			fromDateTf.setText(prop.getProperty("fromDateTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void fromDateTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void toDateTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (toDateTf.getText().trim().equals(prop.getProperty("toDateTf"))) {
			toDateTf.setText("");

			// jTextField1.setForeground(Color.YELLOW);
		}

	}

	private void toDateTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (toDateTf.getText().trim().equals("")) {
			toDateTf.setText(prop.getProperty("toDateTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}
	}

	private void toDateTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void arrAndDepCbActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		if (arrAndDepCb.isSelected()) {
			depBindingNameTf.setVisible(true);
			depBindingNamLabel.setVisible(true);

			dynamicPanel.removeAll();
			dynamicPanel.repaint();
			dynamicPanel.revalidate();

			dynamicPanel.add(arrDepDataPanel);
			dynamicPanel.repaint();
			dynamicPanel.revalidate();

		} else {
			depBindingNameTf.setVisible(false);
			depBindingNamLabel.setVisible(false);

			dynamicPanel.removeAll();
			dynamicPanel.repaint();
			dynamicPanel.revalidate();

			dynamicPanel.add(normalDataPanel);
			dynamicPanel.repaint();
			dynamicPanel.revalidate();

		}
	}

	private void depBindingNameTfFocusGained(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:

		if (depBindingNameTf.getText().trim().equals(prop.getProperty("depBindingNameTf"))) {
			depBindingNameTf.setText("");

			// jTextField1.setForeground(Color.YELLOW);
		}

	}

	private void depBindingNameTfFocusLost(java.awt.event.FocusEvent evt) {
		// TODO add your handling code here:
		if (depBindingNameTf.getText().trim().equals("")) {
			depBindingNameTf.setText(prop.getProperty("depBindingNameTf"));

			// jTextField1.setForeground(Color.YELLOW);
		}

	}

	private void depBindingNameTfActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void limitTfKeyTyped(java.awt.event.KeyEvent evt) {
		// TODO add your handling code here:

	}

	private void limitTfPropertyChange(java.beans.PropertyChangeEvent evt) {
		// TODO add your handling code here:
	}

	private void limitTfMouseExited(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		if (limitTf.getText().trim().equals("1")) {
			fromDateLabel.setVisible(true);
			fromDateLabel.setText("   ");
			toDateLabel.setVisible(false);
			randomDateLabel.setVisible(false);
			toDateTf.setVisible(false);
			randomDateCb.setVisible(false);
			fromDateTf.setEnabled(true);

			fromNumberLabel.setVisible(true);
			fromNumberLabel.setText("   ");
			toNumberLabel.setVisible(false);
			toNumberTf.setVisible(false);
			fromNumberTf.setSize(limitTf.getSize());
			fromNumberTf.setEnabled(true);
			
			sqlNumberCb.setEnabled(true);
			sqlNumberLabel.setVisible(true);
			sqlNumberLabel.setEnabled(true);
			// sqlNumberCb.setSelected(false);
			numberTa.setEnabled(true);
			if (sqlNumberCb.isSelected()) {
				fromNumberLabel.setEnabled(false);
				toNumberLabel.setEnabled(false);
				fromNumberTf.setEnabled(false);
				toNumberTf.setEnabled(false);
			}

			stringLabel.setEnabled(true);
			stringTf.setEnabled(true);
			stringSqlLabel.setEnabled(true);
			stringSqlCb.setEnabled(true);
			stringTa.setEnabled(true);
			if (stringSqlCb.isSelected()) {
				stringTf.setEnabled(false);
			}

		} else if (limitTf.getText().trim().equals("0")) {

			fromDateLabel.setVisible(true);
			fromDateLabel.setText("   ");
			toDateLabel.setVisible(false);
			randomDateLabel.setVisible(false);
			toDateTf.setVisible(false);
			fromDateTf.setEnabled(false);
			randomDateCb.setVisible(false);

			fromNumberLabel.setVisible(true);
			fromNumberLabel.setText("   ");
			toNumberLabel.setVisible(false);
			toNumberTf.setVisible(false);
			fromNumberTf.setEnabled(false);
			sqlNumberCb.setEnabled(false);
			sqlNumberLabel.setEnabled(false);
			numberTa.setEnabled(false);

			stringLabel.setEnabled(false);
			stringTf.setEnabled(false);
			stringSqlLabel.setEnabled(false);
			stringSqlCb.setEnabled(false);
			stringTa.setEnabled(false);

		} else {
			fromDateLabel.setVisible(true);
			fromDateLabel.setText("From");
			toDateLabel.setVisible(true);
			randomDateLabel.setVisible(true);
			toDateTf.setVisible(true);
			fromDateTf.setEnabled(true);
			randomDateCb.setVisible(true);

			fromNumberTf.setEnabled(true);
			fromNumberLabel.setText("From");
			sqlNumberLabel.setEnabled(true);
			sqlNumberLabel.setVisible(true);
			sqlNumberCb.setEnabled(true);
			toNumberLabel.setVisible(true);
			toNumberTf.setVisible(true);
			fromNumberLabel.setVisible(true);
			numberTa.setEnabled(true);
			if (sqlNumberCb.isSelected()) {
				fromNumberLabel.setEnabled(false);
				toNumberLabel.setEnabled(false);
				fromNumberTf.setEnabled(false);
				toNumberTf.setEnabled(false);
			}

			stringLabel.setEnabled(true);
			stringTf.setEnabled(true);
			stringSqlLabel.setEnabled(true);
			stringSqlCb.setEnabled(true);
			stringTa.setEnabled(true);
			if (stringSqlCb.isSelected()) {
				stringTf.setEnabled(false);
			}

		}
	}

	private List<String> getArrivalList(String arrDate, int limit) throws ParseException {
		// TODO Auto-generated method stub

		java.util.List<String> arraivalList = new ArrayList<String>();
		Random rand = new Random();
		Date arrivalDate = new java.text.SimpleDateFormat("yyyy-MM-dd").parse(arrDate);
		System.out.println("arrivalDate::" + arrivalDate);
		LocalDate date = arrivalDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

		for (int i = 0; i < limit; i++) {
			LocalDate arrivalDate1 = date.plusDays(rand.nextInt(90));
			DateTimeFormatter formatters = DateTimeFormatter.ofPattern("uuuu-MM-dd");
			String text = arrivalDate1.format(formatters);

			arraivalList.add(text);
		}
		return arraivalList;
	}

	private List<String> getDepartureList(List<String> arraivalList) throws ParseException {
		// TODO Auto-generated method stub
		java.util.List<String> departureList = new ArrayList<String>();
		Random rand = new Random();
		for (int i = 0; i < arraivalList.size(); i++) {
			String arrstr = arraivalList.get(i);
			Date departureDate = new java.text.SimpleDateFormat("yyyy-MM-dd").parse(arrstr);
			LocalDate date = departureDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

			LocalDate departureDate1 = date.plusDays(2).plusDays(rand.nextInt(15));

			DateTimeFormatter formatters = DateTimeFormatter.ofPattern("uuuu-MM-dd");
			String text = departureDate1.format(formatters);

			departureList.add(text);

		}
		return departureList;
	}

	private List<String> getNumberList(int min, int max, int limit) {
		// TODO Auto-generated method stub
		Random rand = new Random();

		List<String> templist = new ArrayList<String>();
		for (int i = 0; i < limit; i++) {
			int num = min + rand.nextInt((max - min) + 1);
			String str = String.valueOf(num);
			templist.add(str);
		}

		/*
		 * for(String number : templist) { System.out.println("number = "+number); }
		 */

		return templist;
	}

	private class ActionAndFocusListener implements ActionListener, FocusListener, MouseListener {

		@Override
		public void focusGained(FocusEvent e) {
			// TODO Auto-generated method stub

			if (e.getSource() == arrfromDateTf) {
				arrfromDateTfFocusGained(e);
			} else if (e.getSource() == bindingNameTf) {
				bindingNameTfFocusGained(e);
			} else if (e.getSource() == depBindingNameTf) {
				depBindingNameTfFocusGained(e);
			} else if (e.getSource() == fromDateTf) {
				fromDateTfFocusGained(e);
			} else if (e.getSource() == fromNumberTf) {
				fromNumberTfFocusGained(e);
			} else if (e.getSource() == limitTf) {
				limitTfFocusGained(e);
			} else if (e.getSource() == stringTf) {
				stringTfFocusGained(e);
			} else if (e.getSource() == toDateTf) {
				toDateTfFocusGained(e);
			} else if (e.getSource() == toNumberTf) {
				toNumberTfFocusGained(e);
			} else if (e.getSource() == numberTa) {
				numberTaFocusGained(e);
			} else if (e.getSource() == stringTa) {
				stringTaFocusGained(e);
			}

		}

		@Override
		public void focusLost(FocusEvent e) {
			// TODO Auto-generated method stub

			if (e.getSource() == arrfromDateTf) {
				arrfromDateTfFocusLost(e);
			} else if (e.getSource() == bindingNameTf) {
				bindingNameTfFocusLost(e);
			} else if (e.getSource() == depBindingNameTf) {
				depBindingNameTfFocusLost(e);
			} else if (e.getSource() == fromDateTf) {
				fromDateTfFocusLost(e);
			} else if (e.getSource() == fromNumberTf) {
				fromNumberTfFocusLost(e);
			} else if (e.getSource() == limitTf) {
				limitTfFocusLost(e);
			} else if (e.getSource() == stringTf) {
				stringTfFocusLost(e);
			} else if (e.getSource() == toDateTf) {
				toDateTfFocusLost(e);
			} else if (e.getSource() == toNumberTf) {
				toNumberTfFocusLost(e);
			} else if (e.getSource() == numberTa) {
				numberTaFocusLost(e);
			} else if (e.getSource() == stringTa) {
				stringTaFocusLost(e);
			}

		}

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub

			switch (e.getActionCommand()) {
			case "Submit":
				submitButtonActionPerformed(e);
				break;
			case "Addmore":
				addMoreButtonActionPerformed(e);
				break;
			case "Reset":
				resetButtonActionPerformed(e);
				break;
			case "Close":
				closeButtonActionPerformed(e);
				break;
			case "stringSqlCb":
				stringSqlCbActionPerformed(e);
				break;
			case "arrAndDepCb":
				arrAndDepCbActionPerformed(e);
				break;
			case "sqlNumberCb":
				sqlNumberCbActionPerformed(e);
				break;
			case "parameterTypeDd":
				parameterTypeDdActionPerformed(e);
				break;
			default:
				break;
			}

		}

		@Override
		public void mouseClicked(MouseEvent e) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub

			limitTfMouseExited(e);

		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub

		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub

		}

	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GetActionJFrame.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GetActionJFrame.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GetActionJFrame.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GetActionJFrame.class.getName()).log(java.util.logging.Level.SEVERE,
					null, ex);
		}
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GetActionJFrame().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify

	// Labels
	private javax.swing.JLabel arrfromDateLabel;
	private javax.swing.JLabel arrAndDepLabel;
	private javax.swing.JLabel bindingNameLabel;
	private javax.swing.JLabel dateLabel;
	private javax.swing.JLabel dateRangeLabel;
	private javax.swing.JLabel depBindingNamLabel;
	private javax.swing.JLabel fromDateLabel;
	private javax.swing.JLabel fromNumberLabel;
	private javax.swing.JLabel limitLable;
	private javax.swing.JLabel numberLabel;
	private javax.swing.JLabel parameterTypeLabel;
	private javax.swing.JLabel randomDateLabel;
	private javax.swing.JLabel sqlNumberLabel;
	private javax.swing.JLabel stringLabel;
	private javax.swing.JLabel stringSqlLabel;
	private javax.swing.JLabel toDateLabel;
	private javax.swing.JLabel toNumberLabel;

	// TextFields
	private javax.swing.JTextField arrfromDateTf;
	private javax.swing.JTextField bindingNameTf;
	private javax.swing.JTextField depBindingNameTf;
	private javax.swing.JTextField fromDateTf;
	private javax.swing.JTextField fromNumberTf;
	private javax.swing.JTextField limitTf;
	private javax.swing.JTextField stringTf;
	private javax.swing.JTextField toDateTf;
	private javax.swing.JTextField toNumberTf;

	// Button
	private javax.swing.JButton submitButton;
	private javax.swing.JButton addMoreButton;
	private javax.swing.JButton closeButton;
	private javax.swing.JButton resetButton;

	// Panels
	private javax.swing.JPanel datePanelInStatic;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JPanel contentPanel;
	private javax.swing.JPanel dynamicDatePanel;
	private javax.swing.JPanel dynamicPanel;
	private javax.swing.JPanel normalDataPanel;
	private javax.swing.JPanel numberDynamicPanel;
	private javax.swing.JPanel numberPanel;
	private javax.swing.JPanel numberTaBeforePanel;
	private javax.swing.JPanel numberTaPanel;
	private javax.swing.JPanel arrDepDataPanel;
	private javax.swing.JPanel staticPanel;
	private javax.swing.JPanel stringDynamicPanel;
	private javax.swing.JPanel stringPanel;
	private javax.swing.JPanel stringTextAreaBeforePanel;
	private javax.swing.JPanel stringTextAreaPanel;

	// TextArea
	private javax.swing.JScrollPane numberSqlQueryTa;
	private javax.swing.JTextArea numberTa;
	private javax.swing.JScrollPane stringSqlQueryTa;
	private javax.swing.JTextArea stringTa;

	// DropDown
	private javax.swing.JComboBox<String> parameterTypeDd;

	// CheckBox
	private javax.swing.JCheckBox stringSqlCb;
	private javax.swing.JCheckBox arrAndDepCb;
	private javax.swing.JCheckBox randomDateCb;
	private javax.swing.JCheckBox sqlNumberCb;

	// End of variables declaration

	ActionAndFocusListener listener = new ActionAndFocusListener();

	private static int threadGroupVal;
	private static int durationTime;
	private static int rampUpTime;
	private static int delayTime;

	// private static String environment;
	private static String apiName;
	private static String protocol;
	private static String method;
	private static String domain;
	private static String path;

	private InputStream io;
	private Properties prop;

	private Set<String> keys;

	Map<String, String> reqHeadMap = new LinkedHashMap<String, String>();
	Map<String, String> queryParamsMap = new LinkedHashMap<String, String>();

	public void setReqHeadMap(Map<String, String> reqHeadMap) {
		this.reqHeadMap = reqHeadMap;
	}

	public static void setThreadGroupVal(int threadGroupVal) {
		GetActionJFrame.threadGroupVal = threadGroupVal;
	}

	public static void setDurationTime(int durationTime) {
		GetActionJFrame.durationTime = durationTime;
	}

	public static void setRampUpTime(int rampUpTime) {
		GetActionJFrame.rampUpTime = rampUpTime;
	}

	public static void setDelayTime(int delayTime) {
		GetActionJFrame.delayTime = delayTime;
	}

	/*
	 * public static void setEnvironment(String environment) {
	 * GetActionJFrame.environment = environment; }
	 */

	public static void setApiName(String apiName) {
		GetActionJFrame.apiName = apiName;
	}

	public static void setProtocol(String protocol) {
		GetActionJFrame.protocol = protocol;
	}

	public static void setMethod(String method) {
		GetActionJFrame.method = method;
	}

	public static void setDomain(String domain) {
		GetActionJFrame.domain = domain;
	}

	public static void setPath(String path) {
		GetActionJFrame.path = path;
	}

}
//jeevan